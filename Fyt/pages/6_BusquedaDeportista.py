# -*- coding: utf-8 -*-
"""B√∫squeda actividades.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1esnGzJGo5A1q1F2NW3tJdkTX0CJVlz3v
"""

import streamlit as st
from config import supabase
from datetime import time

st.title("Buscar Actividades Deportivas")

# Validar sesi√≥n
if "authenticated" not in st.session_state or not st.session_state["authenticated"] or st.session_state["role"] != "athlete":
    st.warning("Debes iniciar sesi√≥n como deportista para acceder.")
    st.stop()

user_id = st.session_state["user_id"]

# Diccionarios de mapeo ES ‚áÑ EN
dias = {
    "Lunes": "Monday", "Martes": "Tuesday", "Mi√©rcoles": "Wednesday",
    "Jueves": "Thursday", "Viernes": "Friday", "S√°bado": "Saturday", "Domingo": "Sunday"
}
modalidades = {"Presencial": "presential", "Virtual": "virtual"}
generos = {"Mixto": "mixed", "Hombre": "male", "Mujer": "female"}

# --- Formulario de filtros ---
with st.form("search_form"):
    st.subheader("Filtra las actividades disponibles")
    sport = st.text_input("Deporte (ej. Padel, Yoga, etc.)")

    dia_es = st.selectbox("D√≠a de la semana", list(dias.keys()))
    modality_es = st.selectbox("Modalidad", list(modalidades.keys()))
    gender_es = st.selectbox("Preferencia de grupo", list(generos.keys()))

    time_pref = st.time_input("¬øA qu√© hora te gustar√≠a entrenar?", value=time(18, 0))
    price_limit = st.slider("Precio m√°ximo (‚Ç¨)", 0, 50, 20)
    category = st.text_input("Categor√≠a / Nivel (opcional)", "")

    submit = st.form_submit_button("Buscar actividades")

# --- Ejecutar b√∫squeda ---
if submit:
    st.subheader("Resultados encontrados")

    # Convertir a backend
    weekday = dias[dia_es]
    modality = modalidades[modality_es]
    gender = generos[gender_es]

    # Obtener todas las actividades
    res = supabase.table("activities").select("*").execute()

    if res.data:
        resultados = []
        for act in res.data:
            if (
                sport.lower() in str(act["sport_id"]).lower() or sport.lower() in act.get("category", "").lower()
            ) and \
               act["day"] == weekday and \
               act["modality"] == modality and \
               act["gender"] in [gender, "mixed"] and \
               float(act["price"]) <= price_limit:

                activity_hour = int(str(act["time"]).split(":")[0])
                pref_hour = time_pref.hour
                if abs(activity_hour - pref_hour) <= 1:
                    resultados.append(act)

        if resultados:
            for act in resultados:
                dia_ui = [k for k, v in dias.items() if v == act["day"]][0]
                modalidad_ui = [k for k, v in modalidades.items() if v == act["modality"]][0]
                genero_ui = [k for k, v in generos.items() if v == act["gender"]][0]

                with st.expander(f"{dia_ui} - {act['time']}h - {act['category']} ({modalidad_ui})"):
                    st.write(f"üí∏ Precio: {act['price']} ‚Ç¨")
                    st.write(f"üéØ Tipo: {act['type']}")
                    st.write(f"üßç G√©nero: {genero_ui} | Edad: {act['min_age']} - {act['max_age']}")
                    st.write(f"üìç Lat/Lon: {act.get('latitude', '-')}, {act.get('longitude', '-')}")
                    st.write(f"üìù {act['description']}")
        else:
            st.info("No se encontraron actividades con esos filtros.")
    else:
        st.error("No se pudo acceder a la base de datos.")